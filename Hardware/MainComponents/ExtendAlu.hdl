// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1 the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", .
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;

     PARTS:
     // Put you code here:
     And(a=instruction[8], b=instruction[7], out=isRegularOut); // check if  needed a regular or extended use
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=regularOut, zr=regularZr, ng=regularNg);

     Mux16(a=y, b=x, sel=instruction[4], out=DataToShift); // calculate the extended values
     ShiftLeft(in=DataToShift, out=shiftedLeft);
     ShiftRight(in=DataToShift, out=shiftedRight);
     Mux16(a=shiftedRight, b=shiftedLeft, sel=instruction[5], out=shiftedOut); // chooses shift right or left

     Mux16(a=shiftedOut, b=regularOut, sel=isRegularOut, out=finalOut, out[0..7]=orA, out[8..15]=orB, out=out); // choose regualr ALU or extended ALU

     Or8Way(in=orA, out=orOut1); // Handle zr
     Or8Way(in=orB, in[7]=false, out=orOut2);
     Or(a=orOut1, b=orOut2, out=notZr);
     Not(in=notZr, out=zr);

     And16(a[0..15]=true, b=finalOut, out[15]=ng); // Handle ng


}
