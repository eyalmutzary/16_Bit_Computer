// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int curr_length;
    field int max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if ((maxLength < 0) | (maxLength = 0)) {
        let maxLength = 1;
      }
      let str = Array.new(maxLength);
      let curr_length = 0;
      let max_length = maxLength;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
    do Memory.deAlloc(str);
    do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return curr_length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j > (curr_length-1)) | (j < 0)) {
        return;
      }
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if(curr_length = max_length) {
        return str;
      }
      let str[curr_length] = c;
      let curr_length = curr_length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (curr_length = 0) {
        return;
      }

      let str[curr_length-1] = 0;
      let curr_length = curr_length - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val

        var int val, i, d;
        let val = 0;
        let i = 0;
        while (i < curr_length) {
          let d = charAt(i) - 48;  // ASCII value of 0 is 48
          let val = (val*10) + d;
          let i = i + 1;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        var Array temp_arr;
        var int i, j, num_length;

        // Cleans the data on the current string:
        while(curr_length > 0) {
         do eraseLastChar();
        }

        let temp_arr = Array.new(8); // max number length
        let num_length = 0;

        if (val < 0) {
          do appendChar(45);
        }
        if (val = 0) {
          do appendChar(48);
          return;
        }
        let val = Math.abs(val);

        while(val > 9) {
          //let temp_arr[i] = val - (val / 10);
          //do temp_arr.appendChar(val - (10 * (val / 10)));
          let temp_arr[num_length] = val - ((val / 10) * 10);
          let num_length = num_length + 1;
          let val = val / 10;
        }

        let temp_arr[num_length] = val;
        let i = num_length;
        while (i > -1){
          do appendChar(temp_arr[i] + 48);
          let i = i - 1;
        }

        //do Output.printString(this);
        //do temp.dispose();
        return;

        /**
        var int lastDigit;
        var char c;
        let lastDigit = val & 9;  // <=> val % 10
        let c = lastDigit;
        if (val < 10) {
          return c;
        }
        else {
          return str.setInt(val/10).appendChar(c);
        }
        */
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
