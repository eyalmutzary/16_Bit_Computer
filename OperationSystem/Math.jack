// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array values_array;

        /** Initializes the library. */
        function void init() {
            let values_array = Array.new(16);
            let values_array[0] = 1;
      	    let values_array[1] = 2;
      	    let values_array[2] = 4;
      	    let values_array[3] = 8;
      	    let values_array[4] = 16;  // 000..0010000
      	    let values_array[5] = 32;
      	    let values_array[6] = 64;
      	    let values_array[7] = 128;
      	    let values_array[8] = 256;
      	    let values_array[9] = 512;
      	    let values_array[10] = 1024;
      	    let values_array[11] = 2048;
      	    let values_array[12] = 4096;
      	    let values_array[13] = 8192;
      	    let values_array[14] = 16384;
      	    let values_array[15] = 16384 + 16384;
      	    return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
          if (x < 0){
            return -x;
          }
          return x;
        }


        function int check_bit(int num, int i) {
          // returns the i'th bit of num.
          // the boolean statement checks about the binary form of the number
          return -(~((num & values_array[i]) = 0));
        }

        function Array get_binary_form(int num){
          var Array bin_num;
          var int i;

          let bin_num = Array.new(16);
          let i = 15;
          while (i > 0){
            if ((num - values_array[i]) > -1){
                let bin_num[i] = 1;
                let num = num - values_array[i];
            }
            else {
                let bin_num[i] = 0;
            }
            let i = i - 1;
          }
          return bin_num;
        }


        /**
         * Returns the product of x and y.
         * When a Jack compiler detects the multiplication operator '*' in the
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum

            var int sum, shiftedx, i;

            let sum = 0;
            let shiftedx = x;
            let i = 0;

            while (i < 16){
                if (Math.check_bit(y, i) = 1) {
                    let sum = sum + shiftedx;
                }
                let shiftedx = ^(shiftedx);
                let i = i + 1;
            }
            return sum;
        }

        function int divide_helper(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q;

            if (y > x) {
                return 0;
            }

            let q = Math.divide_helper(x, y+y);

            // calculated on paper:
            // ((x - 2*q*y) < y)  <=>  ((Math.divide_helper(x-y, y+y)) < q)
            if ((Math.divide_helper(x-y, y+y)) < q) {
                return q+q;
            }
            else {
                return q + q + 1;
            }
        }

        /**
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
          var boolean is_minus;
          var int value;

          if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let is_minus = true;
          }
          let value = Math.divide_helper(Math.abs(x), Math.abs(y));
          if (is_minus) {
            return -value;
          }
          return value;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y

            var int y, j, temp_y;

            let y = 0;
            let j = 7; // 16/2 - 1

            while (j > -1){
              let temp_y = y + values_array[j];
              if ((((temp_y*temp_y) - 1) < x) & ((temp_y*temp_y) > 0)){
                let y = temp_y;
              }
              let j = j - 1;
            }

            return y;

        }

        /** Returns the greater number. */
        function int max(int a, int b) {
          if (a > b){
            return a;
          }
          return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
          if (a > b){
            return b;
          }
          return a;
        }
}
