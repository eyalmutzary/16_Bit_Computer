// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, freeList;
    static int max_address, current_heap_length, heap_base, next;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null

        let ram = 0;
        let max_address = 16384;  // The last address of the RAM16K (for Data)
        let heap_base = 2048;

        let freeList = heap_base;
        let freeList[0] = 0;  // next pointer default as null
        let freeList[1] = max_address - heap_base - 1;  // the length of the free slots in a row (in the heap)

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if (address < max_address) {
            return ram[address];
        }
        return 0;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        if (address < max_address) {
            let ram[address] = value;
        }
        return;
    }

    function int find_first_fit(int size){
      // looking for the first fit segment available, and returns the address of it (in the heap).
        var int block;
        let block = 0;

        while (true) {
            // Case 1: found enough space in heap
            if (freeList[(block + 1)] > (size + 1)) {
                return block;
            }
            else {
                // Case 2: got to the end of the heap
                if (freeList[block] = 0){
                    return -1;
                }
                // Case 3: proceed to next segment in the heap
                let block = block + freeList[block];
            }
        }
        return 0;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        // Part 1 & 2:
        var int block, old_length, old_next;
        let block = Memory.find_first_fit(size);

        if (block = -1) {
            return -1;  // means not enough space in heap
        }

        // Part 3:
        let old_length = freeList[(block + 1)];
        let old_next = freeList[block];
        let freeList[(block + 1)] = 0;

        // Part 4:
        let freeList[block] = freeList[block] + size + 2;
        let freeList[(block + freeList[block])] = old_next;
        let freeList[(block + freeList[block]+1)] = old_length - size - 2;

        return freeList + block + 2;

    }


    function void connect_deAllocated_memory() {
      var int curr_mem, curr_next, curr_free_space, next_next, next_free_space;

      let curr_mem = freeList;
      while (~(ram[curr_mem] = 0)){
        let curr_next = ram[curr_mem];
        let curr_free_space = ram[curr_mem + 1];

        let next_next = ram[curr_mem + curr_next];
        let next_free_space = ram[curr_mem + curr_next + 1];

        if ((curr_free_space > 0) & (next_free_space > 0)){
          if (next_next = 0) {
            let ram[curr_mem] = 0;
          }
          else {
            let ram[curr_mem] = curr_next + next_next;
          }
          let ram[curr_mem + 1] = curr_free_space + next_free_space;
        }

        let curr_mem = curr_mem + ram[curr_mem];
      }
      return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList

        var int curr_seg_next, next_seg_free_space, next_seg_next;

        let curr_seg_next = ram[o-2];
        let next_seg_free_space = ram[o-2 + curr_seg_next + 1];

        if (next_seg_free_space = 0) {
          let ram[o-1] = curr_seg_next - 2;  // set curr_seg_free_space
        }
        else {
          let next_seg_next = ram[o-2 + curr_seg_next];

          let ram[o-1] = next_seg_free_space + (curr_seg_next) - 2;  // Needed -2?
          let ram[o-2] = next_seg_next;
        }

        do Memory.connect_deAllocated_memory();

        return;

    }


    /** Returns the maximal element contained in the given Array/object.
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the
        // start of the block, and this can be used to implement Memory.max.
        var int length, i, max;

        let length = o - 1;
        let i = 0;
        let max = -32766;

        while (i < length) {
            if (o[i] > max) {
                let max = o[i];
            }
            let i = i + 1;
        }

        return max;
    }
}
